@page "/agences"
@using Kora.Shared.Models
@inject IPaysService PaysService
@inject IVilleService VilleService
@inject IAgenceService AgenceService
@inject IResponsableAgence ResponsableAgenceService
@inject IJSRuntime JSRuntime

<h2>Entrez les informations pour creer une <strong>agence</strong></h2>

<br/>

<form class="container">
    <div class="row">
        <label class="col m-2">Pays</label>
        <label class="col m-2">Ville</label>
        <label class="col m-2">Nom de l'Agence</label>
        <label class="col m-2"> Adresse de l'Agence</label>
        <label class="col m-2"> Contact Téléphonique</label>
    </div>

    <div class="row">
        <select class="col m-2" @bind="@agence.Pays">
            <option value="0">Sélectionnez un Pays</option>
            @foreach (var lepays in pays)
            {
                <option value="@lepays.NomPays">@lepays.NomPays</option>
            }
        </select>
        <select class="col m-2" @bind="@agence.Ville">
            <option value="0">Sélectionnez une Ville</option>
            @foreach (var laville in villes)
            {
                <option value="@laville.NomVille">@laville.NomVille</option>
            }
        </select>
        <input required="required" class="col m-2" type="text" @bind="@agence.NomAgence"/>
        <input required="required" class="col m-2" type="text" @bind="@agence.AdresseAgence"/>
        <input required="required" class="col m-2" type="tel" @bind="@agence.ContactAgence"/>
    </div>

    <div class="row">
        <label class="col m-2"> Email de l'Agence</label>
        <label class="col m-2"> Devise de l'Agence</label>
        <label class="col m-2"> Solde Initial</label>
        <label class="col m-2">Nom du Responsable</label>
    </div>

    <div class="row">
        <input required="required" class="col m-2" type="email" @bind="@agence.EmailAgence"/>
        <input required="required" class="col m-2" type="text" @bind="@agence.DeviseAgence"/>
        <input required="required" class="col m-2" type="number" @bind="@agence.SoldeInitial"/>
        <select class="col m-2" @bind="selectedResponsableId">
            <option value="0">Sélectionnez un Responsable</option>
            @foreach (var resp in responsables)
            {
                <option value="@resp.IdResponsable">@resp.NomResponsable</option>
            }
        </select>
    </div>
    <div class="row">
        <button type="button" class="col w-25 m-2 btn btn-success text-center" @onclick="ConfirmAdd">CREER L'AGENCE</button>
    </div>
</form>

<br/>

<h4 class="mb-4 mt-5">Liste des Agences</h4>
<br/>

<table class="table table-striped table-bordered bg-light">
    <thead class="table-light">
    <th>Nom</th>
    <th>Pays</th>
    <th>Ville</th>
    <th>Adresse</th>
    <th>Contact</th>
    <th>Email</th>
    <th>Devise</th>
    <th>Solde</th>
    <th>Responsable</th>
    <th>Supprimer</th>
    </thead>
    <tbody>
    @foreach (var agence in agences)
    {
        <tr>
            <td>@agence.NomAgence</td>
            <td>@agence.Pays</td>
            <td>@agence.Ville</td>
            <td>@agence.AdresseAgence</td>
            <td>@agence.ContactAgence</td>
            <td>@agence.EmailAgence</td>
            <td>@agence.DeviseAgence</td>
            <td>@agence.SoldeInitial</td>
            <td>#RES @agence.IdResponsable</td>
            <td class="text-center"><span class="oi oi-trash btn btn-danger" @onclick="() => ShowConfirmation(agence.ContactAgence)"></span></td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<Agence> agences = new List<Agence>();
    private List<Pays> pays = new List<Pays>();
    private List<Ville> villes = new List<Ville>();
    private List<ResponsableAgence> responsables = new List<ResponsableAgence>();
    private int selectedResponsableId;
    
    private Agence agence = new Agence();
    
    protected override async Task OnInitializedAsync()
    {
        agences = await AgenceService.GetAllAgence();
        responsables = await ResponsableAgenceService.GetAllResponsable();
        pays = await PaysService.GetAllPays();
        villes = await VilleService.GetAllVille();
    }
    
    private async Task ConfirmAdd()
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Vous voulez-creez cette ajoute ?");
        
        if (result)
        {
            if (selectedResponsableId != 0)
            {
                var selectedResponsable = responsables.FirstOrDefault(r => r.IdResponsable == selectedResponsableId);
                if (selectedResponsable != null)
                {
                    agence.IdResponsable = selectedResponsableId;
                }
            }
            
            var newAgence = await AgenceService.AddAgence(agence);

            if (newAgence != null)
            {
                agences.Add(newAgence);

                agence = new Agence();
                selectedResponsableId = 0;
            }
            
        }
    }
    
    private async Task ShowConfirmation(string contactAgence)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Voulez-vous vraiment supprimer l'agence avec le contact : {contactAgence} ?");

        if (result)
        {
            await DeleteAgence(contactAgence);
        }
    }
    
    
    private async Task DeleteAgence(string contactAgence)
    {
        var isDeleted = await AgenceService.DeleteAgence(contactAgence);
        if (isDeleted)
        {
            // Mettre à jour la liste des agences après la suppression réussie
            agences = await AgenceService.GetAllAgence();
        }
    }

}



