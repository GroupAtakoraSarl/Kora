@page "/comptes"
@using Kora.Shared.ModelsDto
@using Kora.Shared.Models
@inject ICompteService CompteService
@inject IClientService ClientService


<h4>Entrez des infos pour creer un nouveau <strong>compte</strong></h4>
<br/>

<div class="container">
    <div class="row">
        <label class="col m-2">Solde Initial FCFA</label>
        <label class="col m-2">Numéro de Compte</label>
        <label class="col m-2">Nom d'Utilisateur du Client</label>
    </div>
    <div class="row">
        <input type="number" required="required" class="col m-2" @bind="@compte.Solde"/>
        <input type="text" required="required" class="col m-2" @bind="@compte.NumCompte"/>
        <select class="col m-2" @bind="selectedClientId">
            <option value="0">Sélectionnez un client ...</option>
            @foreach (var client in clients)
            {
                <option value="@client.IdClient">@client.Username</option>
            }
        </select>
    </div>
    
    <div class="row">
        <label class="col m-2"></label>
    </div>
    <div class="row">
        <button class="btn btn-success text-center w-25 col-5 m-2" @onclick="ConfirmAdd">Creer le compte</button>
    </div>
</div>
<br/>
<br/>

<h4>Listes des comptes</h4>

<table class="table table-striped table-bordered bg-light fs-6">
    <thead>
    <th>Numero de Comptes</th>
    <th>Solde Initial (Fcfa)</th>
    <th>Identifiant du Client</th>
    </thead>
    <tbody>
    @foreach (var compte in comptes)
    {
        <tr>
            <td>@compte.NumCompte</td>
            <td>@compte.Solde</td>
            <td>@compte.IdClient</td>
        </tr>
    }
    </tbody>
</table>


@code {
    private List<Compte> comptes = new List<Compte>();
    private List<Client> clients = new List<Client>();
    private Compte compte = new Compte();
    private int selectedClientId;
    
    private int idClient;
    
    protected override async Task OnInitializedAsync()
    {
        comptes = await CompteService.GetAllComptes();
        clients = await ClientService.GetAllClient();
    }
    
    private async Task ConfirmAdd()
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Voulez-vous vraiment creer le compte ?");

        if (result)
        {
            if (selectedClientId != 0)
            {
                var selectedClient = clients.FirstOrDefault(c => c.IdClient == selectedClientId);
                if (selectedClient != null)
                {
                    compte.IdClient = selectedClientId;
                    //compte.Client = selectedClient;
                }
            }
            
            var newCompte = await CompteService.AddCompte(compte);
            
            if (newCompte != null)
            {
                comptes.Add(newCompte);
            }
        }
        
    }
    
    
}