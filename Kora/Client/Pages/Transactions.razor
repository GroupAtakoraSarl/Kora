@page "/transactions"
@using Kora.Shared.ModelsDto
@using Kora.Shared.Models
@inject ITransactionService TransactionService
@inject IClientService ClientService
@inject ICompteService CompteService


@if (transactions.Count == 0)
{
    <p>No available transaction</p>
}
else
{
    <h3>Liste des <strong>Transactions</strong></h3>

    <br/>

    <table class="table table-striped table-bordered bg-light fs-6">
        <thead class="table-dark">
        <th class="text-center">N&deg</th>
        <th class="text-center">Solde</th>
        <th class="text-center">N&deg Expéditeur</th>
        <th class="text-center">N&deg Destinataire</th>
        <th class="text-center">Frais</th>
        <th class="text-center">Date</th>
        <th class="text-center">Type de Transaction</th>
        <th class="text-center">Propriété du Compte</th>
        </thead>
        <tbody>
        @foreach (var transaction in transactions.OrderByDescending(t=>t.Date))
        {
            <tr>
                <td class="text-center">@transaction.IdTransaction</td>
                <td class="text-center">@transaction.Solde</td>
                <td class="text-center">@transaction.NumExp</td>
                <td class="text-center">@transaction.NumDes</td>
                <td class="text-center">@transaction.Frais</td>
                <td class="text-center">@transaction.Date</td>
                <td class="text-center">@transaction.Type</td>
                <td class="text-center">@GetClientNom(GetCompteNum(transaction.IdCompte))</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private List<TransactionDto> transactions = new List<TransactionDto>();
    private List<Client> clients = new List<Client>();
    private List<Compte> comptes = new List<Compte>();
    
    private Compte compte = new Compte(); 
    
    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAllTransaction();
        comptes = await CompteService.GetAllComptes();
        clients = await ClientService.GetAllClient();
    }

    private string GetCompteNum(int idCompte)
    {
        var compte = comptes.FirstOrDefault(c => c.IdCompte == idCompte);
        return compte != null ? compte.NumCompte : "Inconnu";
    }

    private string GetClientNom(string numCompte)
    {
        var client = clients.FirstOrDefault(c => c.Tel == numCompte); // Recherche du client par numéro de compte (numéro de téléphone)
        return client != null ? client.Username : "Inconnu";
    }
}
